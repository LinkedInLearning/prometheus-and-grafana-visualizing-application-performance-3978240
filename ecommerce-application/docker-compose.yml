services:
  frontend:
    platform: linux/arm64
    build: 
      context: .
      dockerfile: Dockerfile.frontend
      platforms:
        - linux/arm64
    ports:
      - "3001:80"
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - backend-network 

  backend:
    platform: linux/arm64
    build: 
      context: .
      dockerfile: Dockerfile
      platforms:
        - linux/arm64
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
    environment:
      - PORT=3000
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - backend-network

  redis:
    platform: linux/arm64
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - backend-network

  prometheus:
    platform: linux/arm64
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    networks:
      - backend-network

  grafana:
    image: grafana/grafana:11.5.2
    container_name: grafana
    restart: unless-stopped
    volumes:
      - grafana_commerce_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3500:3000"
    networks:
      - backend-network
    labels:
      org.label-schema.group: "monitoring"

networks:
  backend-network:
    driver: bridge

volumes:
  redis-data: {}
  grafana_commerce_data: {}